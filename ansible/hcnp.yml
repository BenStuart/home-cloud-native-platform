---

- hosts: all

  tasks:

    - name: "Update existing packages"
      import_role:
        name: base
        tasks_from: update-packages
      tags:
        - base
        - update


- hosts: ansible-node

  vars:

    packages: [
      python-pip,
      sshpass,
      unzip,
    ]

    python_modules: [
      { name: netaddr },
    ]

  tasks:

    - name: "Install dependencies"
      import_role:
        name: base
        tasks_from: install-dependencies
      tags:
        - base
        - dependencies


- hosts: hcnp_nodes
    
  vars:

    packages: [
      python-pip,
      sshpass,
    ]

    python_modules: [
      { name: docker },
      { name: python-consul },
    ]

    # resolv_nameservers: "{{ groups['rpi-hcnp_nodes'].ansible_default_ipv4.address }}"
    resolv_nameservers: "{{ groups['hcnp_nodes'] | map('extract', hostvars, ['ansible_default', 'ipv4', 'address']) | join(',') }}"
    # resolv_domain: "foo.org" # consul domain?
    # resolv_search:
    #   - "foo.bar"
    #   - "foobar.com"
    resolv_options:
      - "timeout:2"
      - "rotate"
 
  environment:

    

  tasks:

    - debug:
        msg: "Running tasks on {{ ansible_host }}-{{ ansible_hostname }} at {{ ansible_default_ipv4.interface }}:{{ ansible_default_ipv4.address }} as user {{ ansible_user_id }}"

    - debug:
        var: resolv_nameservers
  
    - name: "Install dependencies"
      import_role:
        name: base
        tasks_from: install-dependencies
      tags:
        - base
        - dependencies

    - name: "Set hostname"
      import_role:
        name: base
        tasks_from: set-hostname
      tags:
        - base
        - hostname

    - name: "Update hosts"
      import_role:
        name: base
        tasks_from: update-hosts
      tags:
        - base
        - hosts


# Run role to install and configure consul
- hosts: consul_instances

  vars:
    consul_install_dependencies: false
    consul_datacenter: hcnp
    consul_ui: true
    consul_domain: 'service.consul'
    consul_dnsmasq_enable: yes
    consul_install_remotely: true

  tasks:

    - name: "Run consul role"
      import_role:
        name: consul
      tags:
        - consul

# # Run role to install and configure vault
# # - hosts: vault_instances

# #   tasks:

# #     - import_role:
# #         name: vault
# #       tags:
# #         - vault

# #     - import_role:
# #         name: vault-init
# #       tags:
# #         - vault
# #       when: 0

# #     - import_role:
# #         name: vault-unseal
# #       tags:
# #         - vault


# Run role to install and configure docker
- hosts: docker_instances

  vars:
    docker_install_compose: false
    docker_users: [
      "{{ ansible_user_id }}"
    ]

  tasks:

    - import_role:
        name: docker
      tags:
        - docker


# # Run role to install and configure nomad
# - hosts: nomad_instances

#   vars:
#     nomad_use_consul: yes
#     nomad_bootstrap_expect: 1
#     nomad_docker_enable: yes

#   tasks:

#     - name: "Run nomad role"
#       import_role:
#         name: nomad
#       tags:
#         - nomad


# Run up core services
- hosts: hcnp_nodes

  vars:

    domain_name: 'greenthegarden.net'
    hcnp_network: 'hcnp'

    run_portainer: yes
    run_traefik: no

  pre_tasks:

    - name: "Collect facts about system services"
      service_facts:
      register: services_state

    - name: Debug
      debug:
        var: services_state
        verbosity: 2

    - name: "Check required services are running"
      assert:
        that:
          - "ansible_facts.services['{{ item }}'].state == 'running'"
        fail_msg: "{{ item }} is not running"
        success_msg: "{{ item }} is running"
      loop:
        - consul.service
        - docker.service

    - name: "Set running services facts"
      set_fact:
        service_consul_running: yes
        service_docker_running: yes

    - name: "Ensure required modules are installed"
      become: yes
      pip:
        name: "{{ item }}"
        state: present
      loop:
        - python-consul
        - docker

  tasks:

    # - name: "Create network {{ hcnp_network }}"
    #   docker_network:
    #     name: "{{ hcnp_network }}"
    #     state: present
    #   when: hcnp_network is defined

    - name: "Run Portainer as a container"
      import_role:
        name: portainer
        tasks_from: container.yml
      tags:
        - portainer
      when: run_portainer

    # - set_fact:
    #     consul_iface: "\
    #       {% if ansible_os_family == 'Windows' %}\
    #         {{ lookup('env','CONSUL_IFACE') | default(ansible_interfaces[0].interface_name, true) }}\
    #       {% else %}\
    #         {{ lookup('env','CONSUL_IFACE') | default(ansible_default_ipv4.interface, true) }}\
    #       {% endif %}"
    #   when: run_traefik

    # - set_fact:
    #     consul_bind_address: "\
    #       {% if ansible_system == 'FreeBSD' %}\
    #         {{ lookup('env','CONSUL_BIND_ADDRESS') | default(hostvars[inventory_hostname]['ansible_'+ consul_iface ]['ipv4'][0]['address'], true) }}\
    #       {% elif ansible_os_family == 'Windows'  %}\
    #         {{ lookup('env','CONSUL_BIND_ADDRESS') | default(hostvars[inventory_hostname]['ansible_ip_addresses'][0], true) }}\
    #       {% else %}\
    #         {{ lookup('env','CONSUL_BIND_ADDRESS') | default(hostvars[inventory_hostname]['ansible_'+ consul_iface ]['ipv4']['address'], true) }}\
    #       {% endif %}"
    #   when: run_traefik

    - debug:
        var: consul_iface
      when: run_traefik

    - debug:
        var: consul_bind_address
      when: run_traefik

    - name: "Configure traefik"
      import_role:
        name: traefik
        tasks_from: configure.yml
      tags:
        - traefik
      when: run_traefik

    - name: "Run Traefik as a container"
      import_role:
        name: traefik
        tasks_from: container.yml
      tags:
        - traefik
      when: run_traefik
