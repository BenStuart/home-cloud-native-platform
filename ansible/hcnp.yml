---

- hosts: all

  vars:

    update_cache_only: yes

  environment:
    http_proxy: "{{ lookup('env', 'http_proxy') }}"
    https_proxy: "{{ lookup('env', 'https_proxy') }}"
    no_proxy: "{{ lookup('env', 'no_proxy') }}"

  pre_tasks:

    - name: Run asserts
      import_role:
        name: configure-host
        tasks_from: run-asserts
      tags:
        - asserts

    # does this need to be here?
    - name: Create hcnp_node_list
      set_fact:
        hcnp_node_list: "{{ groups['hcnp_compute_nodes'] | map('extract', hostvars, 'ansible_ssh_host') | list }}"
      when: groups['hcnp_compute_nodes'] is defined

  tasks:

    - name: Update host packages
      import_role:
        name: configure-host
        tasks_from: run-package-update
      tags:
        - base
        - update


# ensure Ansible dependencies are installed on the Ansible controller
- hosts: ansible-node2

  vars:

    # "ansible_version": {
    #     "full": "2.1.1.0", 
    #     "major": 2, 
    #     "minor": 1, 
    #     "revision": 1, 
    #     "string": "2.1.1.0"
    # }
    ansible_minimum_version: 2.8

    packages: [
      python-apt,
      python-pip,
      sshpass,
      unzip,
    ]

    python_modules: [
      { name: netaddr },
    ]

  pre_tasks:

    # Check Ansible version before proceeding
    - name: Assert Ansible version meets minimum requirements
      assert:
        that:
          - ansible_version.full is version_compare({{ ansible_minimum_version }}, '>=')
        fail_msg: "Ansible must be version {{ ansible_minimum_version }} or greater to run this play. Install Ansible using pip to ensure the latest version."
        success_msg: "Ansible version {{ ansible_version.full }} is installed"

  tasks:

    - name: Install dependencies
      import_role:
        name: configure-host
        tasks_from: install-dependencies
      tags:
        - base
        - dependencies


# Ensure HCNP Compute Nodes are in the required state for installation
- hosts: hcnp_compute_nodes
    
  vars:

    packages: [
      { name: python-apt },
      { name: python-pip },
      { name: sshpass },
    ]

    python_modules: [
      { name: docker },
      { name: python-consul },
    ]

    hcnp_node_public_ip: "\
      {% if ansible_system == 'FreeBSD' %}\
        {{ lookup('env','HCNP_NODE_EXTERNAL_IP') | default(hostvars[inventory_hostname]['ansible_'+ public_iface ]['ipv4'][0]['address'], true) }}\
      {% elif ansible_os_family == 'Windows'  %}\
        {{ lookup('env','HCNP_NODE_EXTERNAL_IP') | default(hostvars[inventory_hostname]['ansible_ip_addresses'][0], true) }}\
      {% else %}\
        {{ lookup('env','HCNP_NODE_EXTERNAL_IP') | default(hostvars[inventory_hostname]['ansible_'+ public_iface | replace('-', '_')]['ipv4']['address'], true) }}\
      {% endif %}"
    
    # resolv_nameservers: "{{ groups['rpi-hcnp_compute_nodes'].ansible_default_ipv4.address }}"
    resolv_nameservers: "{{ groups['hcnp_compute_nodes'] | map('extract', hostvars, ['ansible_default', 'ipv4', 'address']) | join(',') }}"
    # resolv_domain: "foo.org" # consul domain?
    # resolv_search:
    #   - "foo.bar"
    #   - "foobar.com"
    resolv_options:
      - "timeout:2"
      - "rotate"

    # storage_base: 
 
  environment:

  pre_tasks:
    
    - debug:
        msg: "IP address {{ hcnp_node_public_ip }}"

    - debug:
        msg: "Running tasks on {{ ansible_host }}_{{ ansible_hostname }} at {{ ansible_default_ipv4.interface }}:{{ ansible_default_ipv4.address }} as user {{ ansible_user_id }}"

    - debug:
        var: resolv_nameservers
  
  tasks:

    - name: Configure host
      import_role:
        name: configure-host
      tags:
        - base
        - dependencies


# Run role to install and configure consul
- hosts: consul_instances

  vars:
    # consul_install_dependencies: false
    consul_datacenter: hcnp
    consul_domain: 'consul'
    consul_acl_datacenter: "consul"
    consul_recursors: ['8.8.8.8', '8.8.4.4']
    consul_ui: true
    consul_dnsmasq_enable: yes
    consul_install_remotely: true
    consul_client_address: "0.0.0.0"
    consul_acl_master_token_display: yes
    # consul_debug: yes
    # consul_log_level: INFO

  pre_tasks:

    - name: "Assert consul_iface interface exists when defined"
      assert:
        that:
            - consul_iface in ansible_interfaces
        fail_msg: "{{ consul_iface}} is not detected on {{ ansible_host }}. Ensure interface is correctly defined for environment"
        success_msg: "consul_iface set to {{ consul_iface }}"
      when: consul_iface is defined

  tasks:

    - name: "Run consul role"
      become: yes
      import_role:
        name: brianshumate.consul
      tags:
        - consul


# Run role to install and configure vault
- hosts: vault_instances

  vars:
      vault_datacenter: "hcnp"
      vault_domain: "consul"
      vault_ui: yes
      vault_cluster_disable: false
      vault_backend: consul

  tasks:

    - name: "Run vault role"
      become: true
      become_user: root
      import_role:
        name: vault
      tags:
        - vault


# Run role to install and configure docker
- hosts: docker_instances

  vars:
    docker_install_compose: no
    docker_users: [
      "{{ ansible_user_id }}"
    ]

  post_tasks:

    - import_role:
        name: docker
      tags:
        - docker
        - configuration

  tasks:

    - name: install docker
      become: yes
      import_role:
        name: geerlingguy.docker
      tags:
        - installation
        - docker


# Run role to install and configure nomad
- hosts: nomad_instances

  vars:
    nomad_datacenter: "hcnp"
    nomad_domain: "consul"
    nomad_network_interface: enp0s8
    # CONSTANTS
    nomad_consul_address: http://127.0.0.1:8500
    nomad_bind_address: "0.0.0.0"
    nomad_use_consul: yes
    nomad_vault_enabled: yes
    # Vault address is set dynamically
    nomad_vault_address: "http://{{ hostvars[inventory_hostname]['ansible_' + nomad_iface]['ipv4']['address'] }}:8200"
    nomad_vault_create_from_role: "nomad-cluster"


  pre_tasks:

    - name: "Assert nomad_iface interface exists when defined"
      assert:
        that:
            - nomad_iface in ansible_interfaces
        fail_msg: "{{ nomad_iface}} is not detected on {{ ansible_host }}. Ensure interface is correctly defined for environment"
        success_msg: "nomad_iface set to {{ nomad_iface }}"
      when: nomad_iface is defined

  tasks:

    - name: "Install and configure Nomad"
      become: true
      import_role:
        name: brianshumate.nomad
      tags:
        - nomad

- hosts: gateway_instances

  vars:
    # VARIABLES TO EDIT
    traefik_version: "{{ lookup('env','TRAEFIK_VERSION') | default('v1.7.14', true) }}"
    # assume running on linux
    traefik_host_os: linux
    # architecture map idea taken from https://github.com/brianshumate/ansible-consul/blob/master/defaults/main.yml
    traefik_architecture_map:
      # this first entry seems redundant
      # (but it's required for reasons)
      amd64: amd64
      x86_64: amd64
      armv6l: arm
      armv7l: arm
      aarch64: arm64
      32-bit: "386"
      64-bit: amd64
    traefik_architecture: "{{ traefik_architecture_map[ansible_architecture] }}"
    # For releases see https://github.com/containous/traefik/releases
    traefik_binary_url: "https://github.com/containous/traefik/releases/download/{{ traefik_version }}/traefik_{{ traefik_host_os }}-{{ traefik_architecture }}"

    traefik_consul_master: "http://{{ consul_host }}"

  post_tasks:

    - name: Configure Traefik
      become: yes
      import_role:
        name: traefik
        tasks_from: post-install.yml
      tags:
        - traefik
        - configuration

  tasks:

    - name: Install and configure Traefik
      become: true
      import_role:
        name: kibatic.traefik
      tags:
        - traefik
    

# # Run up core services
# - hosts: hcnp_compute_nodes

#   vars:

#     # domain_name: 'greenthegarden.net'
#     # hcnp_network: 'hcnp'

#     run_portainer: yes

#   pre_tasks:

#     # - name: "Collect facts about system services"
#     #   service_facts:
#     #   register: services_state

#     # - name: "Check required services are running"
#     #   assert:
#     #     that:
#     #       - "ansible_facts.services['{{ item }}'].state == 'running'"
#     #     fail_msg: "{{ item }} is not running"
#     #     success_msg: "{{ item }} is running"
#     #   loop:
#     #     - consul.service
#     #     - docker.service
#     #     - nomad.service

#     # - name: "Set running services facts"
#     #   set_fact:
#     #     service_consul_running: yes
#     #     service_docker_running: yes
#     #     service_nomad_running: yes

#     # - name: "Ensure required modules are installed"
#     #   become: yes
#     #   pip:
#     #     name: "{{ item }}"
#     #     state: present
#     #   loop:
#     #     - python-consul
#     #     - docker

#     # - debug:
#     #     var: consul_iface

#     # - debug:
#     #     var: consul_bind_address

#     # - debug:
#     #     var: consul_advertise_address
        
#     # - debug:
#     #     var: nomad_iface

#     # - debug:
#     #     var: nomad_bind_address

#     # - debug:
#     #     var: nomad_advertise_address

#     - name: Create hcnp_node_list
#       set_fact:
#         hcnp_node_list: "{{ groups['hcnp_compute_nodes'] | map('extract', hostvars, 'ansible_host') | list }}"
#       when: groups['hcnp_compute_nodes'] is defined

#     - name: "Configure portainer"
#       import_role:
#         name: portainer
#         tasks_from: configuration.yml
#       tags:
#         - portainer
#       when: run_portainer

#   tasks:

#     - name: "Run Portainer Nomad job"
#       import_role:
#         name: portainer
#         tasks_from: nomad.yml
#       tags:
#         - portainer
#       when: nomad_node_role == 'server' and run_portainer
